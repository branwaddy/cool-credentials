{"ast":null,"code":"var _jsxFileName = \"/Users/brandonwaddy/cool-credentials/front/src/App.js\",\n    _s = $RefreshSig$();\n\nimport { useState } from \"react\";\nimport { Link, BrowserRouter, Routes, Route } from 'react-router-dom';\nimport Register from \"./components/Register\";\nimport Home from \"./components/Home\";\nimport Login from \"./components/Login\";\nimport Credentials from \"./components/Credentials\";\nimport AddCred from \"./components/AddCred\";\nimport UpdateCred from \"./components/UpdateCred\";\nimport HandleUser from \"./components/HandleUser\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction App() {\n  _s();\n\n  const [tokenGenerated, generateToken] = useState(0);\n  const [currentUser, setUser] = useState(0);\n  const [currToken, setCurrToken] = useState();\n  const [credList, setList] = useState();\n  const [divName, setDiv] = useState();\n  const [currCred, setCred] = useState();\n  const [userInfo, setUserInfo] = useState(); // Function requests all jobs from back end, and saves state\n  // Function makes post request to endpoint 'url' with body 'data'\n\n  function postData(url, data) {\n    return fetch(url, {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\"\n      },\n      body: JSON.stringify(data)\n    }).then(response => response.json());\n  }\n\n  function postAuthData(token, url, data) {\n    return fetch(url, {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n        \"Authorization\": \"Bearer \" + token\n      },\n      body: JSON.stringify(data)\n    }).then(response => response.json());\n  }\n\n  function putAuthData(token, url, data) {\n    return fetch(url, {\n      method: \"PUT\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n        \"Authorization\": \"Bearer \" + token\n      },\n      body: JSON.stringify(data)\n    }).then(response => response.json());\n  }\n\n  function getAuthData(token, url) {\n    return fetch(url, {\n      method: \"GET\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n        \"Authorization\": \"Bearer \" + token\n      }\n    }).then(response => response.json());\n  }\n\n  function register(inputUsername, inputPassword) {\n    const details = {\n      \"username\": inputUsername,\n      \"password\": inputPassword,\n      \"site\": \"credentials\"\n    };\n    postData('http://localhost:8080/register', details).then(data => {\n      const newToken = data.token;\n      generateToken(newToken);\n    }).catch(error => console.error(error));\n  }\n\n  function login(token) {\n    setCurrToken(token);\n    getAuthData(token, \"http://localhost:8080/login\").then(data => {\n      if (data.name) {\n        console.log(data);\n        const user = {\n          \"name\": data.name\n        };\n        setUser(user);\n      } else {\n        setUser(false);\n      }\n    }).catch(error => console.error(error));\n  }\n\n  function getCreds() {\n    getAuthData(currToken, \"http://localhost:8080/credentials\").then(result => {\n      setList(result[1]);\n      setDiv(result[0]);\n    }).catch(err => {\n      console.log(err);\n    });\n  }\n\n  function postCred(newUsername, newPassword, newSite, newUserId) {\n    const data = {\n      username: newUsername,\n      password: newPassword,\n      site: newSite,\n      user_id: newUserId\n    };\n    postAuthData(currToken, \"http://localhost:8080/credentials\", data).then(result => {\n      if (result.username) {\n        alert(\"Successfully added!\");\n      } else {\n        alert(\"You do not have permission\");\n      }\n    }).catch(err => {\n      console.log(err);\n    });\n  }\n\n  function putCred(newUsername, newPassword, newSite, newUserId, credId) {\n    const data = {\n      username: newUsername,\n      password: newPassword,\n      site: newSite,\n      user_id: newUserId\n    };\n    putAuthData(currToken, \"http://localhost:8080/credentials/\" + credId, data).then(result => {\n      if (result.username) {\n        alert(\"Successfully updated!\");\n      } else {\n        alert(\"You do not have permission\");\n      }\n    }).catch(err => {\n      console.log(err);\n    });\n  }\n\n  function getUser(id) {\n    getAuthData(currToken, \"http://localhost:8080/user/\" + id).then(result => {\n      if (result.surname) {\n        setUserInfo(result);\n      } else {\n        alert(\"You do not have permission\");\n      }\n    }).catch(err => {\n      console.log(err);\n      alert(\"User doesnt exist!\");\n    });\n  }\n\n  function putUser(newSurname, newName, newRole, newDiv1, newDiv2, newDiv3, id) {\n    let data;\n\n    if (newDiv2 != \"\" && newDiv3 != \"\") {\n      data = {\n        surname: newSurname,\n        name: newName,\n        division_id: newDiv1,\n        division_id2: newDiv2,\n        division_id3: newDiv3,\n        role: newRole\n      };\n      console.log(data);\n    }\n\n    putAuthData(currToken, \"http://localhost:8080/user/\" + id, data).then(result => {\n      if (result.surname) {\n        alert(\"Successfully updated!\");\n      } else {\n        alert(\"You do not have permission\");\n      }\n    }).catch(err => {\n      console.log(err);\n    });\n  }\n\n  function saveCred(cred) {\n    const objCred = JSON.parse(cred);\n    setCred(objCred);\n  }\n\n  function wipeToken() {\n    generateToken(0);\n  }\n\n  return /*#__PURE__*/_jsxDEV(BrowserRouter, {\n    children: /*#__PURE__*/_jsxDEV(Routes, {\n      children: [/*#__PURE__*/_jsxDEV(Route, {\n        path: \"/user\",\n        element: /*#__PURE__*/_jsxDEV(HandleUser, {\n          user: userInfo,\n          findUser: getUser,\n          updateUser: putUser\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 182,\n          columnNumber: 38\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 182,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Route, {\n        path: \"/add-cred\",\n        element: /*#__PURE__*/_jsxDEV(AddCred, {\n          add: postCred\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 183,\n          columnNumber: 42\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 183,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Route, {\n        path: \"/update-cred\",\n        element: /*#__PURE__*/_jsxDEV(UpdateCred, {\n          cred: currCred,\n          update: putCred\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 184,\n          columnNumber: 45\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 184,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Route, {\n        path: \"/credentials\",\n        element: /*#__PURE__*/_jsxDEV(Credentials, {\n          getCreds: getCreds,\n          creds: credList,\n          divName: divName,\n          saveCred: saveCred\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 185,\n          columnNumber: 45\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 185,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Route, {\n        path: \"/login\",\n        element: /*#__PURE__*/_jsxDEV(Login, {\n          submit: login,\n          user: currentUser\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 187,\n          columnNumber: 39\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 187,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Route, {\n        path: \"/register\",\n        element: /*#__PURE__*/_jsxDEV(Register, {\n          submit: register,\n          token: tokenGenerated\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 188,\n          columnNumber: 42\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 188,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Route, {\n        path: \"/\",\n        element: /*#__PURE__*/_jsxDEV(Home, {\n          wipeToken: wipeToken\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 189,\n          columnNumber: 34\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 189,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 181,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 179,\n    columnNumber: 5\n  }, this);\n}\n\n_s(App, \"yPM7q76MxMFwLnQ66J88DSFhKYU=\");\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["/Users/brandonwaddy/cool-credentials/front/src/App.js"],"names":["useState","Link","BrowserRouter","Routes","Route","Register","Home","Login","Credentials","AddCred","UpdateCred","HandleUser","App","tokenGenerated","generateToken","currentUser","setUser","currToken","setCurrToken","credList","setList","divName","setDiv","currCred","setCred","userInfo","setUserInfo","postData","url","data","fetch","method","headers","body","JSON","stringify","then","response","json","postAuthData","token","putAuthData","getAuthData","register","inputUsername","inputPassword","details","newToken","catch","error","console","login","name","log","user","getCreds","result","err","postCred","newUsername","newPassword","newSite","newUserId","username","password","site","user_id","alert","putCred","credId","getUser","id","surname","putUser","newSurname","newName","newRole","newDiv1","newDiv2","newDiv3","division_id","division_id2","division_id3","role","saveCred","cred","objCred","parse","wipeToken"],"mappings":"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","sourcesContent":["import { useState } from \"react\";\nimport { Link, BrowserRouter, Routes, Route } from 'react-router-dom';\nimport Register from \"./components/Register\";\nimport Home from \"./components/Home\";\nimport Login from \"./components/Login\";\nimport Credentials from \"./components/Credentials\";\nimport AddCred from \"./components/AddCred\";\nimport UpdateCred from \"./components/UpdateCred\";\nimport HandleUser from \"./components/HandleUser\";\n\nfunction App() {\n  const [tokenGenerated, generateToken] = useState(0);\n  const [currentUser, setUser] = useState(0);\n  const [currToken, setCurrToken] = useState();\n  const [credList, setList] = useState();\n  const [divName, setDiv] = useState();\n  const [currCred, setCred] = useState();\n  const [userInfo, setUserInfo] = useState();\n  // Function requests all jobs from back end, and saves state\n  \n  \n  // Function makes post request to endpoint 'url' with body 'data'\n  function postData(url, data){\n    return fetch(url, {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n      },\n      body: JSON.stringify(data),\n    })\n    .then(response=>response.json());\n  }\n  function postAuthData(token, url, data){\n    return fetch(url, {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n        \"Authorization\": \"Bearer \" + token\n      },\n      body: JSON.stringify(data),\n    })\n    .then(response=>response.json());\n  }\n\n  function putAuthData(token, url, data){\n    return fetch(url, {\n      method: \"PUT\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n        \"Authorization\": \"Bearer \" + token\n      },\n      body: JSON.stringify(data),\n    })\n    .then(response=>response.json());\n  }\n\n  function getAuthData(token, url){\n    return fetch(url, {\n      method: \"GET\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n        \"Authorization\": \"Bearer \" + token\n      },\n    })\n    .then(response=>response.json());\n  }\n\n  function register(inputUsername, inputPassword) {\n    const details = {\"username\": inputUsername, \"password\": inputPassword, \"site\": \"credentials\"};\n    postData('http://localhost:8080/register', details)\n    .then(data => {\n      const newToken = data.token;\n      generateToken(newToken);\n    })\n    .catch(error => console.error(error))\n  }\n  function login(token) {\n    setCurrToken(token);\n    getAuthData(token, \"http://localhost:8080/login\")\n    .then(data => {\n      if (data.name) {\n        console.log(data);\n        const user = {\"name\": data.name};\n        setUser(user);\n      }\n      else {\n        setUser(false);\n      }\n      \n    })\n    .catch(error => console.error(error))\n  }\n\n  function getCreds() {\n    getAuthData(currToken, \"http://localhost:8080/credentials\")\n    .then(result => {\n        setList(result[1]);\n        setDiv(result[0]);\n    })\n    .catch(err=>{\n        console.log(err);\n    })\n  }\n\n  function postCred(newUsername, newPassword, newSite, newUserId) {\n    const data = {username: newUsername, password: newPassword, site: newSite, user_id: newUserId}\n    postAuthData(currToken, \"http://localhost:8080/credentials\", data)\n    .then(result => {\n     if (result.username) {\n      alert(\"Successfully added!\")\n     }\n     else {\n      alert(\"You do not have permission\")\n     }\n  })\n  .catch(err=>{\n      console.log(err);\n  })\n  }\n  function putCred(newUsername, newPassword, newSite, newUserId, credId) {\n    const data = {username: newUsername, password: newPassword, site: newSite, user_id: newUserId}\n    putAuthData(currToken, \"http://localhost:8080/credentials/\" + credId, data)\n    .then(result => {\n     if (result.username) {\n      alert(\"Successfully updated!\")\n     }\n     else {\n      alert(\"You do not have permission\")\n     }\n  })\n  .catch(err=>{\n      console.log(err);\n  })\n  }\n\n  function getUser(id) {\n    getAuthData(currToken, \"http://localhost:8080/user/\" + id)\n    .then(result => {\n      if (result.surname) {\n       setUserInfo(result);\n      }\n      else {\n       alert(\"You do not have permission\")\n      }\n   })\n   .catch(err=>{\n       console.log(err);\n       alert(\"User doesnt exist!\")\n   })\n  }\n  function putUser(newSurname, newName, newRole, newDiv1, newDiv2, newDiv3, id) {\n    let data\n    if (newDiv2 != \"\" && newDiv3 != \"\") {\n      data = {surname: newSurname, name: newName, division_id: newDiv1, division_id2: newDiv2,\n        division_id3: newDiv3, role: newRole};\n        console.log(data);\n    }\n    putAuthData(currToken, \"http://localhost:8080/user/\" + id, data)\n    .then(result => {\n     if (result.surname) {\n      alert(\"Successfully updated!\")\n     }\n     else {\n      alert(\"You do not have permission\")\n     }\n  })\n  .catch(err=>{\n      console.log(err);\n  })\n  }\n  function saveCred(cred) {\n    const objCred = JSON.parse(cred) \n    setCred(objCred);\n  }\n  function wipeToken() {\n    generateToken(0);\n  }\n  return (\n    <BrowserRouter>\n      \n      <Routes>\n        <Route path='/user' element={<HandleUser user={userInfo} findUser={getUser} updateUser={putUser}/>}/>\n        <Route path='/add-cred' element={<AddCred add={postCred}/>}/>\n        <Route path='/update-cred' element={<UpdateCred cred={currCred} update={putCred}/>}/>\n        <Route path='/credentials' element={<Credentials getCreds={getCreds} creds={credList} divName={divName} \n        saveCred={saveCred}/>}/>\n        <Route path='/login' element={<Login submit={login} user={currentUser}/>}/>\n        <Route path='/register' element={<Register submit={register} token={tokenGenerated}/>}/>\n        <Route path='/' element={<Home wipeToken={wipeToken}/>}/>\n      </Routes>\n    </BrowserRouter>\n  );\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}